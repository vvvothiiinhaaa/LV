document.addEventListener("DOMContentLoaded", async function () {
    await loadProvinces(); // T·∫£i danh s√°ch t·ªânh/th√†nh ph·ªë khi trang t·∫£i l·∫ßn ƒë·∫ßu
    setupEventListeners(); // G√°n s·ª± ki·ªán x·ª≠ l√Ω dropdown t·ªânh/th√†nh ph·ªë, qu·∫≠n/huy·ªán, ph∆∞·ªùng/x√£
    loadUserAddresses(); // T·∫£i danh s√°ch ƒë·ªãa ch·ªâ c·ªßa ng∆∞·ªùi d√πng
});

// üü¢ 1. H√†m t·∫£i danh s√°ch t·ªânh/th√†nh ph·ªë
async function loadProvinces() {
    const provinceSelect = document.getElementById("provinceSelect");
    if (!provinceSelect) return;

    try {
        const response = await fetch("https://provinces.open-api.vn/api/p/");
        const provinces = await response.json();
        provinceSelect.innerHTML = '<option value="">Ch·ªçn t·ªânh/th√†nh ph·ªë</option>';
        provinces.forEach(province => {
            provinceSelect.options.add(new Option(province.name, province.code));
        });
    } catch (error) {
        console.error("L·ªói khi t·∫£i t·ªânh/th√†nh ph·ªë:", error);
    }
}

// üü¢ 2. H√†m t·∫£i danh s√°ch qu·∫≠n/huy·ªán khi ch·ªçn t·ªânh/th√†nh ph·ªë
async function loadDistricts(provinceCode) {
    const districtSelect = document.getElementById("districtSelect");
    if (!districtSelect) return;

    try {
        const response = await fetch(`https://provinces.open-api.vn/api/p/${provinceCode}?depth=2`);
        const data = await response.json();
        districtSelect.innerHTML = '<option value="">Ch·ªçn qu·∫≠n/huy·ªán</option>';
        data.districts.forEach(district => {
            districtSelect.options.add(new Option(district.name, district.code));
        });
    } catch (error) {
        console.error("L·ªói khi t·∫£i qu·∫≠n/huy·ªán:", error);
    }
}

// üü¢ 3. H√†m t·∫£i danh s√°ch ph∆∞·ªùng/x√£ khi ch·ªçn qu·∫≠n/huy·ªán
async function loadWards(districtCode) {
    const wardSelect = document.getElementById("wardSelect");
    if (!wardSelect) return;

    try {
        const response = await fetch(`https://provinces.open-api.vn/api/d/${districtCode}?depth=2`);
        const data = await response.json();
        wardSelect.innerHTML = '<option value="">Ch·ªçn ph∆∞·ªùng/x√£</option>';
        data.wards.forEach(ward => {
            wardSelect.options.add(new Option(ward.name, ward.code));
        });
    } catch (error) {
        console.error("L·ªói khi t·∫£i ph∆∞·ªùng/x√£:", error);
    }
}

// üü¢ 4. G√°n s·ª± ki·ªán thay ƒë·ªïi cho dropdown t·ªânh/th√†nh ph·ªë, qu·∫≠n/huy·ªán, ph∆∞·ªùng/x√£
function setupEventListeners() {
    document.getElementById("provinceSelect")?.addEventListener("change", function () {
        loadDistricts(this.value);
        document.getElementById("wardSelect").innerHTML = '<option value="">Ch·ªçn ph∆∞·ªùng/x√£</option>';
    });

    document.getElementById("districtSelect")?.addEventListener("change", function () {
        loadWards(this.value);
    });
}

// üü¢ 5. H√†m th√™m ƒë·ªãa ch·ªâ m·ªõi
async function addNewAddress(event) {
    event.preventDefault(); // NgƒÉn ch·∫∑n h√†nh vi m·∫∑c ƒë·ªãnh c·ªßa form

    const formData = {
        userId: await getUserId(),
        recipientName: document.getElementById("recipientName").value,
        phoneNumber: document.getElementById("phoneNumber").value,
        provinceCity: document.getElementById("provinceSelect").selectedOptions[0].text,
        district: document.getElementById("districtSelect").selectedOptions[0].text,
        wardSubdistrict: document.getElementById("wardSelect").selectedOptions[0].text,
        addressDetail: document.getElementById("addressDetail").value,
        defaultAddress: document.getElementById("defaultAddressCheck").checked
    };

    try {
        const response = await fetch("http://localhost:8080/api/addresses/create", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(formData)
        });

        if (response.ok) {
            alert("Th√™m ƒë·ªãa ch·ªâ th√†nh c√¥ng!");
            loadUserAddresses(); // Load l·∫°i danh s√°ch ƒë·ªãa ch·ªâ
        } else {
            throw new Error("Kh√¥ng th·ªÉ th√™m ƒë·ªãa ch·ªâ.");
        }
    } catch (error) {
        console.error("L·ªói khi th√™m ƒë·ªãa ch·ªâ:", error);
    }
}

// üü¢ 6. H√†m hi·ªÉn th·ªã danh s√°ch ƒë·ªãa ch·ªâ c·ªßa ng∆∞·ªùi d√πng
async function loadUserAddresses() {
    const userId = await getUserId();
    if (!userId) return;

    try {
        const response = await fetch(`http://localhost:8080/api/addresses/user/${userId}`);
        const addresses = await response.json();

        const container = document.getElementById("address");
        container.innerHTML = addresses.map(address => renderAddressCard(address)).join("");
    } catch (error) {
        console.error("L·ªói khi t·∫£i danh s√°ch ƒë·ªãa ch·ªâ:", error);
    }
}

// üü¢ 7. H√†m x√≥a ƒë·ªãa ch·ªâ
async function deleteAddress(addressId) {
    const userId = await getUserId();
    if (!userId) return;

    try {
        const response = await fetch(`http://localhost:8080/api/addresses/delete/${userId}/${addressId}`, { method: "DELETE" });
        if (response.ok) {
            alert("ƒê√£ x√≥a ƒë·ªãa ch·ªâ!");
            loadUserAddresses(); // Load l·∫°i danh s√°ch sau khi x√≥a
        } else {
            throw new Error("L·ªói khi x√≥a ƒë·ªãa ch·ªâ.");
        }
    } catch (error) {
        console.error("L·ªói khi x√≥a ƒë·ªãa ch·ªâ:", error);
    }
}

// üü¢ 8. H√†m c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ
async function updateAddress(event) {
    event.preventDefault(); // NgƒÉn ch·∫∑n h√†nh vi m·∫∑c ƒë·ªãnh c·ªßa form

    const userId = await getUserId();
    const addressId = document.getElementById("addressId").value;
    if (!userId || !addressId) return;

    const updatedData = {
        recipientName: document.getElementById("recipientName").value,
        phoneNumber: document.getElementById("phoneNumber").value,
        addressDetail: document.getElementById("addressDetail").value,
        provinceCity: document.getElementById("provinceSelect").selectedOptions[0].text,
        district: document.getElementById("districtSelect").selectedOptions[0].text,
        wardSubdistrict: document.getElementById("wardSelect").selectedOptions[0].text,
        defaultAddress: document.getElementById("defaultAddressCheck").checked
    };

    try {
        const response = await fetch(`http://localhost:8080/api/addresses/update/user/${userId}/address/${addressId}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(updatedData)
        });

        if (response.ok) {
            alert("C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ th√†nh c√¥ng!");
            loadUserAddresses(); // Load l·∫°i danh s√°ch ƒë·ªãa ch·ªâ
        } else {
            throw new Error("L·ªói khi c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ.");
        }
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ:", error);
    }
}

// üü¢ 9. H√†m hi·ªÉn th·ªã th√¥ng tin ƒë·ªãa ch·ªâ trong card
function renderAddressCard(address) {
    return `
        <div class="card">
            <div class="card-body">
                <h5>${address.recipientName}</h5>
                <p>${address.phoneNumber}</p>
                <p>${address.addressDetail}, ${address.wardSubdistrict}, ${address.district}, ${address.provinceCity}</p>
                <button onclick="deleteAddress(${address.id})">X√≥a</button>
            </div>
        </div>
    `;
}
