package com.example.Pet.chatgpt;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.example.Pet.Modal.Discount;
import com.example.Pet.Modal.Product;
import com.example.Pet.Modal.ServicePrice;
import com.example.Pet.Modal.ServiceStep;
import com.example.Pet.Modal.Serviceforpet;
import com.example.Pet.Repository.DiscountRepository;
import com.example.Pet.Repository.ProductRepository;
import com.example.Pet.Repository.ServiceforpetRepository;
import com.example.Pet.Service.ServiceforpetService;

@Service
public class ChatGPTService {

    private final String API_URL = "https://api.openai.com/v1/chat/completions";
    private final String API_KEY = "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"; // ·∫®n API Key
    private List<Map<String, String>> chatHistory = new ArrayList<>();

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private DiscountRepository discountRepository;

    @Autowired
    private ServiceforpetService serviceforpetService;

    @Autowired
    private ServiceforpetRepository serviceforpetRepository;

    public String getChatResponse(String userMessage) {
        RestTemplate restTemplate = new RestTemplate();

        Set<IntentType> intents = detectIntent(userMessage);
        String additionalData = fetchDataByIntent(userMessage, intents);

        // R√∫t g·ªçn d·ªØ li·ªáu n·∫øu qu√° d√†i
        if (additionalData.length() > 2500) {
            additionalData = additionalData.substring(0, 2000) + "\n...(d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c r√∫t g·ªçn)";
        }

        // N·∫øu c√≥ d·ªØ li·ªáu n·ªôi b·ªô ‚Üí √©p GPT ∆∞u ti√™n d√πng
        if (!additionalData.isEmpty()) {
            chatHistory.add(Map.of(
                    "role", "system",
                    "content", "D·ªØ li·ªáu t·ª´ h·ªá th·ªëng c√≥ th·ªÉ gi√∫p tr·∫£ l·ªùi ng∆∞·ªùi d√πng:\n" + additionalData
                    + "\nVui l√≤ng ∆∞u ti√™n s·ª≠ d·ª•ng th√¥ng tin tr√™n ƒë·ªÉ ph·∫£n h·ªìi n·∫øu ph√π h·ª£p."
            ));
        }

        // C√¢u h·ªèi ng∆∞·ªùi d√πng sau c√πng
        chatHistory.add(Map.of("role", "user", "content", userMessage));

        // Gi·ªõi h·∫°n s·ªë l∆∞·ª£t h·ªôi tho·∫°i g·ª≠i GPT
        int maxHistorySize = 4;
        if (chatHistory.size() > maxHistorySize) {
            chatHistory = new ArrayList<>(chatHistory.subList(chatHistory.size() - maxHistorySize, chatHistory.size()));
        }

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setBearerAuth(API_KEY);

        Map<String, Object> body = new HashMap<>();
        body.put("model", "gpt-4-turbo");
        body.put("temperature", 0.2);
        body.put("messages", chatHistory);

        HttpEntity<Map<String, Object>> request = new HttpEntity<>(body, headers);

        long start = System.currentTimeMillis();
        ResponseEntity<Map> response = restTemplate.exchange(API_URL, HttpMethod.POST, request, Map.class);
        long duration = System.currentTimeMillis() - start;

        System.out.println(" G·ªçi GPT m·∫•t: " + duration + "ms");
        if (duration > 10000) {
            System.err.println(" C·∫¢NH B√ÅO: GPT ph·∫£n h·ªìi qu√° ch·∫≠m (" + duration + "ms)");
        }

        if (response.getBody() != null) {
            List<Map<String, Object>> choices = (List<Map<String, Object>>) response.getBody().get("choices");
            if (!choices.isEmpty()) {
                String botReply = (String) ((Map<String, Object>) choices.get(0).get("message")).get("content");
                chatHistory.add(Map.of("role", "assistant", "content", botReply));
                return botReply;
            }
        }

        return "Xin l·ªói, kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu.";
    }

    public void resetChatHistory() {
        chatHistory.clear();
    }

    private String extractServiceKeyword(String message) {
        message = message.toLowerCase();
        // Lo·∫°i b·ªè c√°c stop words kh√¥ng quan tr·ªçng, gi·ªØ l·∫°i t·ª´ "d·ªãch v·ª•" v√¨ c√≥ th·ªÉ l√† ph·∫ßn c·ªßa t√™n d·ªãch v·ª•.
        String[] stopWords = {
            "quy tr√¨nh", "h∆∞·ªõng d·∫´n", "th·ª±c hi·ªán",
            "l√† g√¨", "bao g·ªìm", "chi ti·∫øt", "v·ªÅ", "cho", "c·ªßa",
            "t√¥i mu·ªën bi·∫øt", "xin", "vui l√≤ng"
        };
        for (String word : stopWords) {
            message = message.replaceAll("\\b" + word + "\\b", "");
        }
        return message.trim().replaceAll("\\s+", " ");
    }

    private static final Map<IntentType, List<String>> INTENT_KEYWORDS = Map.of(
            IntentType.ASK_PRODUCT, List.of("s·∫£n ph·∫©m", "mua", "th·ª©c ƒÉn", "ƒë·ªì ch∆°i", "l·ªìng", "d·ª•ng c·ª•"),
            IntentType.ASK_SERVICE, List.of("d·ªãch v·ª•", "rƒÉng mi·ªáng", "spa", "t·∫Øm", "c·∫Øt t·ªâa", "k√Ω sinh", "chƒÉm s√≥c"),
            IntentType.ASK_PRICE, List.of("b·∫£ng gi√°", "gi√°", "bao nhi√™u", "r·∫ª", "ƒë·∫Øt", "chi ph√≠"),
            IntentType.ASK_STOCK, List.of("c√≤n kh√¥ng", "t·ªìn kho", "s·ªë l∆∞·ª£ng", "c√≤n h√†ng"),
            IntentType.ASK_BRAND, List.of("Whiskas", "Pedigree", "Royal Canin"),
            IntentType.ASK_PET_TYPE, List.of("ch√≥", "m√®o", "hamster", "th·ªè"),
            IntentType.ASK_PROMOTION, List.of("khuy·∫øn m√£i", "gi·∫£m gi√°", "∆∞u ƒë√£i"),
            IntentType.ASK_STEPS, List.of("c√°c b∆∞·ªõc", "quy tr√¨nh", "h∆∞·ªõng d·∫´n", "th·ª±c hi·ªán", "tr√¨nh t·ª±", "b∆∞·ªõc n√†o", "b·∫Øt ƒë·∫ßu", "bao g·ªìm g√¨") // üëà th√™m t·ª´ kh√≥a v·ªÅ b∆∞·ªõc

    );

    private Set<IntentType> detectIntent(String userMessage) {
        String msg = userMessage.toLowerCase();
        Set<IntentType> intents = new HashSet<>();

        for (Map.Entry<IntentType, List<String>> entry : INTENT_KEYWORDS.entrySet()) {
            for (String keyword : entry.getValue()) {
                if (msg.contains(keyword)) {
                    intents.add(entry.getKey());
                    break;
                }
            }
        }

        if (intents.isEmpty()) {
            intents.add(IntentType.UNKNOWN);
        }
        return intents;
    }

    private Optional<String> extractBrand(String message) {
        List<String> knownBrands = List.of("whiskas", "pedigree", "royal canin");

        for (String brand : knownBrands) {
            if (message.toLowerCase().contains(brand.toLowerCase())) {
                return Optional.of(brand);
            }
        }
        return Optional.empty();
    }

    private String fetchDataByIntent(String message, Set<IntentType> intents) {
        StringBuilder result = new StringBuilder();
        String msg = message.toLowerCase();
        System.out.println("Tin nh·∫Øn ng∆∞·ªùi d√πng: " + message);
        System.out.println("C√°c intent ph√°t hi·ªán: " + intents);

        // 2. N·∫øu kh√¥ng ph·∫£i d·ªãch v·ª• -> x·ª≠ l√Ω s·∫£n ph·∫©m
        List<Product> products = productRepository.searchByKeyword(message);
        Optional<String> brandOpt = extractBrand(msg);

        if (brandOpt.isPresent()) {
            String brand = brandOpt.get();
            List<Product> brandProducts = productRepository.searchByKeyword(brand);
            if (!brandProducts.isEmpty()) {
                result.append("S·∫£n ph·∫©m theo th∆∞∆°ng hi·ªáu **").append(brand).append("**:\n");
                for (Product p : brandProducts) {
                    result.append("- ").append(p.getName())
                            .append(p.getPrice() != null ? ", Gi√°: " + p.getPrice() + "ƒë" : ", Gi√°: ch∆∞a c√≥")
                            .append("\n");
                }
            }
        } else if (intents.contains(IntentType.ASK_PET_TYPE) && !products.isEmpty()) {
            result.append("S·∫£n ph·∫©m theo lo·∫°i th√∫ c∆∞ng:\n");
            for (Product p : products) {
                result.append("- ").append(p.getName())
                        .append(p.getPrice() != null ? ", Gi√°: " + p.getPrice() + "ƒë" : ", Gi√°: ch∆∞a c√≥")
                        .append("\n");
            }
        } else {
            result.append("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu.\n");
        }

        // 1. Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ m√£ gi·∫£m gi√°
        if (msg.contains("c√≥ m√£ gi·∫£m gi√° g√¨") || msg.contains("c√°c m√£ khuy·∫øn m√£i") || msg.contains("m√£ ∆∞u ƒë√£i") || msg.contains("c√°c m√£ gi·∫£m gi√° hi·ªán t·∫°i")) {
            List<Discount> activeDiscounts = discountRepository.findAllByStartDateBeforeAndEndDateAfterAndUsageLimitGreaterThan(
                    LocalDateTime.now(), LocalDateTime.now(), 0
            );

            if (activeDiscounts.isEmpty()) {
                result.append("Hi·ªán t·∫°i kh√¥ng c√≥ m√£ gi·∫£m gi√° n√†o ƒëang ho·∫°t ƒë·ªông.\n");
            } else {
                result.append("C√°c m√£ gi·∫£m gi√° ƒëang c√≤n hi·ªáu l·ª±c:\n");
                for (Discount d : activeDiscounts) {
                    result.append("- M√£: ").append(d.getCode())
                            .append(", Gi·∫£m ").append(d.getDiscountPercentage()).append("%")
                            .append(", ƒê∆°n t·ªëi thi·ªÉu: ").append((int) d.getMinOrderAmount()).append("ƒë")
                            .append(", H·∫°n d√πng: ƒë·∫øn ").append(d.getEndDate().toLocalDate()).append("\n");
                }
            }

            System.out.println("N·ªôi dung g·ª≠i cho GPT:\n" + result);
            return result.toString(); // Tr·∫£ v·ªÅ ngay n·∫øu ch·ªâ h·ªèi v·ªÅ gi·∫£m gi√°
        }

        // ======== N·∫øu ng∆∞·ªùi d√πng h·ªèi danh s√°ch d·ªãch v·ª• hi·ªán c√≥ ========
        if (msg.contains("c√≥ nh·ªØng d·ªãch v·ª• g√¨") || msg.contains("c√°c d·ªãch v·ª• hi·ªán c√≥") || msg.contains("danh s√°ch d·ªãch v·ª•")) {
            List<Serviceforpet> allServices = serviceforpetRepository.findAllWithDetails2();
            if (!allServices.isEmpty()) {
                result.append("Danh s√°ch d·ªãch v·ª• hi·ªán c√≥:\n");
                for (Serviceforpet s : allServices) {
                    result.append("- ").append(s.getName()).append("\n");
                }
            } else {
                result.append("Hi·ªán t·∫°i ch∆∞a c√≥ d·ªãch v·ª• n√†o trong h·ªá th·ªëng.\n");
            }
            System.out.println("N·ªôi dung g·ª≠i cho GPT:\n" + result);
            return result.toString(); //  return ngay, kh√¥ng x·ª≠ l√Ω ti·∫øp
        }

        // Nh·∫≠n di·ªán m·∫´u c√¢u h·ªèi c·ªë ƒë·ªãnh (m·ªü r·ªông t·ª´ kh√≥a)
        boolean isPriceQuery = msg.contains("gi√° c·ªßa") || msg.contains("b·∫£ng gi√° c·ªßa") || msg.contains("b·∫£ng gi√° ") || msg.contains("gi√°");
        boolean isStepsQuery = msg.contains("c√°c b∆∞·ªõc c·ªßa") || msg.contains("c√°c b∆∞·ªõc th·ª±c hi·ªán c·ªßa")
                || msg.contains("quy tr√¨nh c·ªßa") || msg.contains("h∆∞·ªõng d·∫´n c·ªßa") || msg.contains("c√°c b∆∞·ªõc");

        // Tr√≠ch xu·∫•t t√™n d·ªãch v·ª• t·ª´ m·∫´u c·ªë ƒë·ªãnh
        String serviceName;
        if (isPriceQuery) {
            serviceName = msg.replace("gi√° c·ªßa", "")
                    .replace("b·∫£ng gi√° c·ªßa", "")
                    .replace("b·∫£ng gi√°", "")
                    .replace("gi√°", "").trim();
        } else if (isStepsQuery) {
            serviceName = msg.replace("c√°c b∆∞·ªõc c·ªßa", "")
                    .replace("c√°c b∆∞·ªõc th·ª±c hi·ªán c·ªßa", "")
                    .replace("c√°c b∆∞·ªõc", "")
                    .replace("quy tr√¨nh c·ªßa", "")
                    .replace("h∆∞·ªõng d·∫´n c·ªßa", "").trim();
        } else {
            // N·∫øu kh√¥ng kh·ªõp m·∫´u c·ªë ƒë·ªãnh, x·ª≠ l√Ω b·∫±ng keyword
            serviceName = extractServiceKeyword(message);
        }

        System.out.println("T√™n d·ªãch v·ª• t√¨m ki·∫øm: " + serviceName);
        // T√¨m ki·∫øm d·ªãch v·ª• b·∫±ng t√™n (·ªü ƒë√¢y c√≥ th·ªÉ d√πng truy v·∫•n LIKE ƒë·ªÉ so kh·ªõp g·∫ßn ƒë√∫ng)
        List<Serviceforpet> services = serviceforpetService.searchWithDetails3(serviceName);
        System.out.println("S·ªë d·ªãch v·ª• t√¨m th·∫•y: " + services.size());
        // N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c d·ªãch v·ª•, th√¥ng b√°o.
        if (services.isEmpty()) {
            result.append("Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• ph√π h·ª£p v·ªõi y√™u c·∫ßu.\n");
            System.out.println("N·ªôi dung g·ª≠i cho GPT:\n" + result);
            return result.toString();
        }
        // L·∫•y d·ªãch v·ª• ƒë·∫ßu ti√™n (ho·∫∑c b·∫°n c√≥ th·ªÉ c·∫£i ti·∫øn ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch)
        Serviceforpet service = services.get(0);
        // L∆∞u l·∫°i ng·ªØ c·∫£nh d·ªãch v·ª• (n·∫øu b·∫°n ƒë√£ c√≥ bi·∫øn lastService, c√≥ th·ªÉ c·∫≠p nh·∫≠t ·ªü ƒë√¢y)
        // lastService = service;
        result.append("\nD·ªãch v·ª•: ").append(service.getName()).append("\n");
        // N·∫øu ng∆∞·ªùi d√πng h·ªèi theo m·∫´u "Gi√° c·ªßa d·ªãch v·ª• X"
        if (isPriceQuery) {
            if (service.getPrices() != null && !service.getPrices().isEmpty()) {
                result.append("B·∫£ng gi√° theo k√≠ch th∆∞·ªõc th√∫ c∆∞ng:\n");
                for (ServicePrice sp : service.getPrices()) {
                    result.append("  - ").append(sp.getPetSize().getSizeName())
                            .append(": ").append(sp.getPrice()).append("ƒë\n");
                }
            } else {
                result.append("D·ªãch v·ª• n√†y ch∆∞a c√≥ b·∫£ng gi√°.\n");
            }
        } // N·∫øu ng∆∞·ªùi d√πng h·ªèi theo m·∫´u "C√°c b∆∞·ªõc th·ª±c hi·ªán c·ªßa d·ªãch v·ª• X" ho·∫∑c "Quy tr√¨nh c·ªßa d·ªãch v·ª• X"
        else if (isStepsQuery) {
            if (service.getSteps() != null && !service.getSteps().isEmpty()) {
                result.append("C√°c b∆∞·ªõc th·ª±c hi·ªán:\n");
                service.getSteps().stream()
                        .sorted(Comparator.comparingInt(ServiceStep::getStepOrder))
                        .forEach(step -> result.append("  ‚Ä¢ B∆∞·ªõc ")
                        .append(step.getStepOrder()).append(": ")
                        .append(step.getStepTitle()).append(" - ")
                        .append(step.getStepDescription()).append("\n"));
            } else {
                result.append("D·ªãch v·ª• n√†y ch∆∞a c√≥ quy tr√¨nh/b∆∞·ªõc th·ª±c hi·ªán.\n");
            }
        } // N·∫øu kh√¥ng theo m·∫´u c·ªë ƒë·ªãnh, hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß th√¥ng tin c·ªßa d·ªãch v·ª•
        else {
            result.append("M√¥ t·∫£: ").append(service.getDescription()).append("\n");
            result.append("Th·ªùi gian th·ª±c hi·ªán: ").append(service.getDuration()).append("\n");

            if (service.getPrices() != null && !service.getPrices().isEmpty()) {
                result.append("B·∫£ng gi√° theo k√≠ch th∆∞·ªõc th√∫ c∆∞ng:\n");
                for (ServicePrice sp : service.getPrices()) {
                    result.append("  - ").append(sp.getPetSize().getSizeName())
                            .append(": ").append(sp.getPrice()).append("ƒë\n");
                }
            } else {
                result.append("D·ªãch v·ª• n√†y ch∆∞a c√≥ b·∫£ng gi√°.\n");
            }
            if (service.getSteps() != null && !service.getSteps().isEmpty()) {
                result.append("C√°c b∆∞·ªõc th·ª±c hi·ªán:\n");
                service.getSteps().stream()
                        .sorted(Comparator.comparingInt(ServiceStep::getStepOrder))
                        .forEach(step -> result.append("  ‚Ä¢ B∆∞·ªõc ")
                        .append(step.getStepOrder()).append(": ")
                        .append(step.getStepTitle()).append(" - ")
                        .append(step.getStepDescription()).append("\n"));
            } else {
                result.append("D·ªãch v·ª• n√†y ch∆∞a c√≥ quy tr√¨nh/b∆∞·ªõc th·ª±c hi·ªán.\n");
            }
        }

        System.out.println("N·ªôi dung g·ª≠i cho GPT:\n" + result);
        return result.toString();
    }

    enum IntentType {
        ASK_PRODUCT,
        ASK_SERVICE,
        ASK_PRICE,
        ASK_STOCK,
        ASK_BRAND,
        ASK_PET_TYPE,
        ASK_PROMOTION,
        ASK_STEPS,
        UNKNOWN
    }

    private Serviceforpet lastService;

    // H√†m fetchDataByIntent k·∫øt h·ª£p c·∫£ s·∫£n ph·∫©m v√† d·ªãch v·ª•, h·ªó tr·ª£ c√¢u h·ªèi c·ªë ƒë·ªãnh ri√™ng bi·ªát cho gi√° v√† c√°c b∆∞·ªõc c·ªßa d·ªãch v·ª•.
    // private String fetchDataByIntent(String message, Set<IntentType> intents) {
    //     StringBuilder result = new StringBuilder();
    //     String msg = message.toLowerCase();
    //     System.out.println("Tin nh·∫Øn ng∆∞·ªùi d√πng: " + message);
    //     System.out.println("C√°c intent ph√°t hi·ªán: " + intents);
    //     // Ti·ªÅn x·ª≠ l√Ω t√™n d·ªãch v·ª•
    //     String cleanedKeyword = extractServiceKeyword(message);
    //     System.out.println("T·ª´ kh√≥a sau x·ª≠ l√Ω: " + cleanedKeyword);
    //     List<Product> products = productRepository.searchByKeyword(message);
    //     List<Serviceforpet> services = serviceforpetService.searchWithDetails3(cleanedKeyword);
    //     System.out.println("S·ªë s·∫£n ph·∫©m t√¨m th·∫•y: " + products.size());
    //     System.out.println("S·ªë d·ªãch v·ª• t√¨m th·∫•y: " + services.size());
    //     Optional<String> brandOpt = extractBrand(msg);
    //     // 1. N·∫øu c√≥ th∆∞∆°ng hi·ªáu -> hi·ªÉn th·ªã s·∫£n ph·∫©m theo th∆∞∆°ng hi·ªáu
    //     if (brandOpt.isPresent()) {
    //         String brand = brandOpt.get();
    //         List<Product> brandProducts = productRepository.searchByKeyword(brand);
    //         if (!brandProducts.isEmpty()) {
    //             result.append("S·∫£n ph·∫©m theo th∆∞∆°ng hi·ªáu **").append(brand).append("**:\n");
    //             for (Product p : brandProducts) {
    //                 result.append("- ").append(p.getName())
    //                         .append(p.getPrice() != null ? ", Gi√°: " + p.getPrice() + "ƒë" : ", Gi√°: ch∆∞a c√≥")
    //                         .append("\n");
    //             }
    //         }
    //     } // 2. N·∫øu ng∆∞·ªùi d√πng h·ªèi theo lo·∫°i th√∫ c∆∞ng -> hi·ªÉn th·ªã s·∫£n ph·∫©m theo lo·∫°i
    //     else if (intents.contains(IntentType.ASK_PET_TYPE) && !products.isEmpty()) {
    //         result.append("S·∫£n ph·∫©m theo lo·∫°i th√∫ c∆∞ng:\n");
    //         for (Product p : products) {
    //             result.append("- ").append(p.getName())
    //                     .append(p.getPrice() != null ? ", Gi√°: " + p.getPrice() + "ƒë" : ", Gi√°: ch∆∞a c√≥")
    //                     .append("\n");
    //         }
    //     } // 3. N·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu danh s√°ch d·ªãch v·ª• hi·ªán c√≥
    //     else if (msg.contains("c√≥ nh·ªØng d·ªãch v·ª• g√¨") || msg.contains("c√°c d·ªãch v·ª• hi·ªán c√≥") || msg.contains("danh s√°ch d·ªãch v·ª•")) {
    //         List<Serviceforpet> allServices = serviceforpetRepository.findAllWithDetails2();
    //         if (!allServices.isEmpty()) {
    //             result.append("Danh s√°ch d·ªãch v·ª• hi·ªán c√≥:\n");
    //             for (Serviceforpet s : allServices) {
    //                 result.append("- ").append(s.getName()).append("\n");
    //             }
    //         }
    //     } // 4. Chi ti·∫øt d·ªãch v·ª•
    //     else if (!services.isEmpty()) {
    //         // Ki·ªÉm tra xem c√¢u h·ªèi c√≥ theo m·∫´u c·ªë ƒë·ªãnh ri√™ng cho gi√° hay cho c√°c b∆∞·ªõc hay kh√¥ng:
    //         boolean isPriceQuery = msg.contains("gi√° c·ªßa d·ªãch v·ª•") || msg.contains("gi√° c·ªßa") || msg.contains("b·∫£ng gi√° c·ªßa");
    //         boolean isStepsQuery = msg.contains("c√°c b∆∞·ªõc th·ª±c hi·ªán c·ªßa") || msg.contains("quy tr√¨nh c·ªßa");
    //         // N·∫øu theo m·∫´u c·ªë ƒë·ªãnh, tr√≠ch xu·∫•t t√™n d·ªãch v·ª• t·ª´ c√¢u h·ªèi.
    //         String serviceName;
    //         if (isPriceQuery) {
    //             serviceName = msg.replace("gi√° c·ªßa d·ªãch v·ª•", "").trim();
    //         } else if (isStepsQuery) {
    //             if (msg.contains("c√°c b∆∞·ªõc th·ª±c hi·ªán c·ªßa")) {
    //                 serviceName = msg.replace("c√°c b∆∞·ªõc th·ª±c hi·ªán c·ªßa", "").trim();
    //             } else {
    //                 serviceName = msg.replace("quy tr√¨nh c·ªßa", "").trim();
    //             }
    //         } else {
    //             serviceName = cleanedKeyword;
    //         }
    //         System.out.println("T√™n d·ªãch v·ª• t√¨m ki·∫øm: " + serviceName);
    //         // T√¨m ki·∫øm l·∫°i d·ª±a tr√™n t√™n d·ªãch v·ª• tr√≠ch xu·∫•t ƒë∆∞·ª£c (n·∫øu c·∫ßn)
    //         List<Serviceforpet> filteredServices = serviceforpetService.searchWithDetails3(serviceName);
    //         if (!filteredServices.isEmpty()) {
    //             services = filteredServices;
    //         }
    //         // N·∫øu v·∫´n kh√¥ng t√¨m ƒë∆∞·ª£c, c√≥ th·ªÉ d√πng d·ªãch v·ª• ƒë√£ l∆∞u t·ª´ ng·ªØ c·∫£nh.
    //         if (services.isEmpty() && lastService != null) {
    //             System.out.println("Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• v·ªõi t·ª´ kh√≥a, s·ª≠ d·ª•ng d·ªãch v·ª• ƒë√£ l∆∞u t·ª´ ng·ªØ c·∫£nh.");
    //             services.add(lastService);
    //         } else if (!services.isEmpty()) {
    //             lastService = services.get(0); // c·∫≠p nh·∫≠t ng·ªØ c·∫£nh
    //         }
    //         // X·ª≠ l√Ω hi·ªÉn th·ªã th√¥ng tin c·ªßa d·ªãch v·ª• theo m·∫´u c·ªë ƒë·ªãnh n·∫øu c√≥:
    //         Serviceforpet service = services.get(0);
    //         result.append("\nD·ªãch v·ª•: ").append(service.getName()).append("\n");
    //         if (isPriceQuery && !isStepsQuery) {
    //             // Ch·ªâ hi·ªÉn th·ªã b·∫£ng gi√°
    //             if (service.getPrices() != null && !service.getPrices().isEmpty()) {
    //                 result.append("B·∫£ng gi√° theo k√≠ch th∆∞·ªõc th√∫ c∆∞ng:\n");
    //                 for (ServicePrice sp : service.getPrices()) {
    //                     result.append("  - ").append(sp.getPetSize().getSizeName())
    //                             .append(": ").append(sp.getPrice()).append("ƒë\n");
    //                 }
    //             } else {
    //                 result.append("D·ªãch v·ª• n√†y ch∆∞a c√≥ b·∫£ng gi√°.\n");
    //             }
    //         } else if (isStepsQuery && !isPriceQuery) {
    //             // Ch·ªâ hi·ªÉn th·ªã c√°c b∆∞·ªõc th·ª±c hi·ªán
    //             if (service.getSteps() != null && !service.getSteps().isEmpty()) {
    //                 result.append("C√°c b∆∞·ªõc th·ª±c hi·ªán:\n");
    //                 service.getSteps().stream()
    //                         .sorted(Comparator.comparingInt(ServiceStep::getStepOrder))
    //                         .forEach(step -> result.append("  ‚Ä¢ B∆∞·ªõc ")
    //                         .append(step.getStepOrder()).append(": ")
    //                         .append(step.getStepTitle()).append(" - ")
    //                         .append(step.getStepDescription()).append("\n"));
    //             } else {
    //                 result.append("D·ªãch v·ª• n√†y ch∆∞a c√≥ quy tr√¨nh/b∆∞·ªõc th·ª±c hi·ªán.\n");
    //             }
    //         } else {
    //             // N·∫øu kh√¥ng theo m·∫´u c·ªë ƒë·ªãnh, hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß th√¥ng tin c·ªßa d·ªãch v·ª•
    //             result.append("M√¥ t·∫£: ").append(service.getDescription()).append("\n");
    //             if (service.getPrices() != null && !service.getPrices().isEmpty()) {
    //                 result.append("B·∫£ng gi√° theo k√≠ch th∆∞·ªõc th√∫ c∆∞ng:\n");
    //                 for (ServicePrice sp : service.getPrices()) {
    //                     result.append("  - ").append(sp.getPetSize().getSizeName())
    //                             .append(": ").append(sp.getPrice()).append("ƒë\n");
    //                 }
    //             } else {
    //                 result.append("D·ªãch v·ª• n√†y ch∆∞a c√≥ b·∫£ng gi√°.\n");
    //             }
    //             if (service.getSteps() != null && !service.getSteps().isEmpty()) {
    //                 result.append("C√°c b∆∞·ªõc th·ª±c hi·ªán:\n");
    //                 service.getSteps().stream()
    //                         .sorted(Comparator.comparingInt(ServiceStep::getStepOrder))
    //                         .forEach(step -> result.append("  ‚Ä¢ B∆∞·ªõc ")
    //                         .append(step.getStepOrder()).append(": ")
    //                         .append(step.getStepTitle()).append(" - ")
    //                         .append(step.getStepDescription()).append("\n"));
    //             } else {
    //                 result.append("D·ªãch v·ª• n√†y ch∆∞a c√≥ quy tr√¨nh/b∆∞·ªõc th·ª±c hi·ªán.\n");
    //             }
    //         }
    //     } // 5. Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• ph√π h·ª£p
    //     else {
    //         result.append("Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• ph√π h·ª£p v·ªõi y√™u c·∫ßu.\n");
    //     }
    //     System.out.println("N·ªôi dung g·ª≠i cho GPT:\n" + result);
    //     return result.toString();
    // }
}
